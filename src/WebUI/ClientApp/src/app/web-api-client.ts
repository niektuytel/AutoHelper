//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IGarageAccountClient {

    getSettings(): Promise<GarageItemDto>;

    getOverview(): Promise<GarageOverview>;

    getServices(): Promise<GarageServiceItemDto[]>;

    getEmployees(): Promise<GarageEmployeeItemDto[]>;

    create(command: CreateGarageCommand): Promise<GarageItem>;

    createService(command: CreateGarageServiceCommand): Promise<GarageServiceItem>;

    createEmployee(command: CreateGarageEmployeeCommand): Promise<GarageEmployeeItem>;

    updateSettings(command: UpdateGarageSettingsCommand): Promise<GarageItem>;

    updateService(command: UpdateGarageServiceCommand): Promise<GarageServiceItem>;

    updateEmployee(command: UpdateGarageEmployeeCommand): Promise<GarageEmployeeItem>;

    deleteService(id: string): Promise<GarageServiceItem>;

    deleteEmployee(id: string): Promise<GarageEmployeeItem>;
}

export class GarageAccountClient implements IGarageAccountClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getSettings(): Promise<GarageItemDto> {
        let url_ = this.baseUrl + "/api/GarageAccount/GetSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSettings(_response);
        });
    }

    protected processGetSettings(response: Response): Promise<GarageItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageItemDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageItemDto>(null as any);
    }

    getOverview(): Promise<GarageOverview> {
        let url_ = this.baseUrl + "/api/GarageAccount/GetOverview";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOverview(_response);
        });
    }

    protected processGetOverview(response: Response): Promise<GarageOverview> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageOverview.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageOverview>(null as any);
    }

    getServices(): Promise<GarageServiceItemDto[]> {
        let url_ = this.baseUrl + "/api/GarageAccount/GetServices";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetServices(_response);
        });
    }

    protected processGetServices(response: Response): Promise<GarageServiceItemDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GarageServiceItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageServiceItemDto[]>(null as any);
    }

    getEmployees(): Promise<GarageEmployeeItemDto[]> {
        let url_ = this.baseUrl + "/api/GarageAccount/GetEmployees";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmployees(_response);
        });
    }

    protected processGetEmployees(response: Response): Promise<GarageEmployeeItemDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GarageEmployeeItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageEmployeeItemDto[]>(null as any);
    }

    create(command: CreateGarageCommand): Promise<GarageItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<GarageItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageItem>(null as any);
    }

    createService(command: CreateGarageServiceCommand): Promise<GarageServiceItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/CreateService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateService(_response);
        });
    }

    protected processCreateService(response: Response): Promise<GarageServiceItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageServiceItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageServiceItem>(null as any);
    }

    createEmployee(command: CreateGarageEmployeeCommand): Promise<GarageEmployeeItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/CreateEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateEmployee(_response);
        });
    }

    protected processCreateEmployee(response: Response): Promise<GarageEmployeeItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageEmployeeItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageEmployeeItem>(null as any);
    }

    updateSettings(command: UpdateGarageSettingsCommand): Promise<GarageItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/UpdateSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSettings(_response);
        });
    }

    protected processUpdateSettings(response: Response): Promise<GarageItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageItem>(null as any);
    }

    updateService(command: UpdateGarageServiceCommand): Promise<GarageServiceItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/UpdateService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateService(_response);
        });
    }

    protected processUpdateService(response: Response): Promise<GarageServiceItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageServiceItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageServiceItem>(null as any);
    }

    updateEmployee(command: UpdateGarageEmployeeCommand): Promise<GarageEmployeeItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/UpdateEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateEmployee(_response);
        });
    }

    protected processUpdateEmployee(response: Response): Promise<GarageEmployeeItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageEmployeeItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageEmployeeItem>(null as any);
    }

    deleteService(id: string): Promise<GarageServiceItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/DeleteService/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteService(_response);
        });
    }

    protected processDeleteService(response: Response): Promise<GarageServiceItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageServiceItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageServiceItem>(null as any);
    }

    deleteEmployee(id: string): Promise<GarageEmployeeItem> {
        let url_ = this.baseUrl + "/api/GarageAccount/DeleteEmployee/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteEmployee(_response);
        });
    }

    protected processDeleteEmployee(response: Response): Promise<GarageEmployeeItem> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageEmployeeItem.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageEmployeeItem>(null as any);
    }
}

export interface IGarageClient {

    getServiceTypesByLicensePlate(licensePlate: string | null): Promise<GarageServiceType[]>;

    searchLookups(licensePlate: string | null, latitude: number, longitude: number, inMetersRange: number | undefined, pageNumber: number | undefined, pageSize: number | undefined, autoCompleteOnGarageName: string | null | undefined, filters: string[] | null | undefined): Promise<PaginatedListOfGarageLookupBriefDto>;

    getLookup(identifier: string | null, licensePlate: string | null | undefined): Promise<GarageLookupDto>;

    getLookupsStatus(): Promise<GarageLookupsStatusDto>;

    upsertLookups(maxInsertAmount: number | undefined, maxUpdateAmount: number | undefined): Promise<string>;
}

export class GarageClient implements IGarageClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getServiceTypesByLicensePlate(licensePlate: string | null): Promise<GarageServiceType[]> {
        let url_ = this.baseUrl + "/api/Garage/GetServiceTypesByLicensePlate/{licensePlate}";
        if (licensePlate === undefined || licensePlate === null)
            throw new Error("The parameter 'licensePlate' must be defined.");
        url_ = url_.replace("{licensePlate}", encodeURIComponent("" + licensePlate));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetServiceTypesByLicensePlate(_response);
        });
    }

    protected processGetServiceTypesByLicensePlate(response: Response): Promise<GarageServiceType[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageServiceType[]>(null as any);
    }

    searchLookups(licensePlate: string | null, latitude: number, longitude: number, inMetersRange: number | undefined, pageNumber: number | undefined, pageSize: number | undefined, autoCompleteOnGarageName: string | null | undefined, filters: string[] | null | undefined): Promise<PaginatedListOfGarageLookupBriefDto> {
        let url_ = this.baseUrl + "/api/Garage/SearchLookups/{licensePlate}/{latitude}/{longitude}?";
        if (licensePlate === undefined || licensePlate === null)
            throw new Error("The parameter 'licensePlate' must be defined.");
        url_ = url_.replace("{licensePlate}", encodeURIComponent("" + licensePlate));
        if (latitude === undefined || latitude === null)
            throw new Error("The parameter 'latitude' must be defined.");
        url_ = url_.replace("{latitude}", encodeURIComponent("" + latitude));
        if (longitude === undefined || longitude === null)
            throw new Error("The parameter 'longitude' must be defined.");
        url_ = url_.replace("{longitude}", encodeURIComponent("" + longitude));
        if (inMetersRange === null)
            throw new Error("The parameter 'inMetersRange' cannot be null.");
        else if (inMetersRange !== undefined)
            url_ += "inMetersRange=" + encodeURIComponent("" + inMetersRange) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (autoCompleteOnGarageName !== undefined && autoCompleteOnGarageName !== null)
            url_ += "autoCompleteOnGarageName=" + encodeURIComponent("" + autoCompleteOnGarageName) + "&";
        if (filters !== undefined && filters !== null)
            filters && filters.forEach(item => { url_ += "filters=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchLookups(_response);
        });
    }

    protected processSearchLookups(response: Response): Promise<PaginatedListOfGarageLookupBriefDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfGarageLookupBriefDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfGarageLookupBriefDto>(null as any);
    }

    getLookup(identifier: string | null, licensePlate: string | null | undefined): Promise<GarageLookupDto> {
        let url_ = this.baseUrl + "/api/Garage/GetLookup/{identifier}?";
        if (identifier === undefined || identifier === null)
            throw new Error("The parameter 'identifier' must be defined.");
        url_ = url_.replace("{identifier}", encodeURIComponent("" + identifier));
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLookup(_response);
        });
    }

    protected processGetLookup(response: Response): Promise<GarageLookupDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageLookupDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageLookupDto>(null as any);
    }

    getLookupsStatus(): Promise<GarageLookupsStatusDto> {
        let url_ = this.baseUrl + "/api/Garage/GetLookupsStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLookupsStatus(_response);
        });
    }

    protected processGetLookupsStatus(response: Response): Promise<GarageLookupsStatusDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageLookupsStatusDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageLookupsStatusDto>(null as any);
    }

    upsertLookups(maxInsertAmount: number | undefined, maxUpdateAmount: number | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Garage/UpsertLookups?";
        if (maxInsertAmount === null)
            throw new Error("The parameter 'maxInsertAmount' cannot be null.");
        else if (maxInsertAmount !== undefined)
            url_ += "maxInsertAmount=" + encodeURIComponent("" + maxInsertAmount) + "&";
        if (maxUpdateAmount === null)
            throw new Error("The parameter 'maxUpdateAmount' cannot be null.");
        else if (maxUpdateAmount !== undefined)
            url_ += "maxUpdateAmount=" + encodeURIComponent("" + maxUpdateAmount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpsertLookups(_response);
        });
    }

    protected processUpsertLookups(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export interface IVehicleClient {

    searchVehicle(licensePlate: string | null | undefined): Promise<FileResponse>;

    getVehicleBriefInfo(licensePlate: string | null | undefined): Promise<VehicleBriefInfoItemDto>;

    getVehicleInfo(licensePlate: string | null | undefined): Promise<VehicleInfoItemDto>;
}

export class VehicleClient implements IVehicleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    searchVehicle(licensePlate: string | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Vehicle/search?";
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchVehicle(_response);
        });
    }

    protected processSearchVehicle(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getVehicleBriefInfo(licensePlate: string | null | undefined): Promise<VehicleBriefInfoItemDto> {
        let url_ = this.baseUrl + "/api/Vehicle/GetVehicleBriefInfo?";
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehicleBriefInfo(_response);
        });
    }

    protected processGetVehicleBriefInfo(response: Response): Promise<VehicleBriefInfoItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VehicleBriefInfoItemDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VehicleBriefInfoItemDto>(null as any);
    }

    getVehicleInfo(licensePlate: string | null | undefined): Promise<VehicleInfoItemDto> {
        let url_ = this.baseUrl + "/api/Vehicle/GetVehicleInfo?";
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehicleInfo(_response);
        });
    }

    protected processGetVehicleInfo(response: Response): Promise<VehicleInfoItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VehicleInfoItemDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VehicleInfoItemDto>(null as any);
    }
}

export interface IWeatherForecastClient {

    get(): Promise<WeatherForecast[]>;
}

export class WeatherForecastClient implements IWeatherForecastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class GarageItemDto implements IGarageItemDto {
    name?: string;
    email?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    location?: GarageLocationItem;
    bankingDetails?: GarageBankingDetailsItem;
    servicesSettings?: GarageServicesSettingsItem;

    constructor(data?: IGarageItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsAppNumber = _data["whatsAppNumber"];
            this.location = _data["location"] ? GarageLocationItem.fromJS(_data["location"]) : <any>undefined;
            this.bankingDetails = _data["bankingDetails"] ? GarageBankingDetailsItem.fromJS(_data["bankingDetails"]) : <any>undefined;
            this.servicesSettings = _data["servicesSettings"] ? GarageServicesSettingsItem.fromJS(_data["servicesSettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GarageItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsAppNumber"] = this.whatsAppNumber;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["bankingDetails"] = this.bankingDetails ? this.bankingDetails.toJSON() : <any>undefined;
        data["servicesSettings"] = this.servicesSettings ? this.servicesSettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGarageItemDto {
    name?: string;
    email?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    location?: GarageLocationItem;
    bankingDetails?: GarageBankingDetailsItem;
    servicesSettings?: GarageServicesSettingsItem;
}

export abstract class BaseEntity implements IBaseEntity {
    id?: string;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: string;
    domainEvents?: BaseEvent[];
}

export class GarageLocationItem extends BaseEntity implements IGarageLocationItem {
    address!: string;
    city!: string;
    postalCode!: string;
    country!: string;
    longitude!: number;
    latitude!: number;

    constructor(data?: IGarageLocationItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.address = _data["address"];
            this.city = _data["city"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): GarageLocationItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageLocationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address;
        data["city"] = this.city;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageLocationItem extends IBaseEntity {
    address: string;
    city: string;
    postalCode: string;
    country: string;
    longitude: number;
    latitude: number;
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export class GarageBankingDetailsItem extends BaseEntity implements IGarageBankingDetailsItem {
    bankName?: string;
    kvKNumber?: string;
    accountHolderName?: string;
    iban?: string;

    constructor(data?: IGarageBankingDetailsItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.bankName = _data["bankName"];
            this.kvKNumber = _data["kvKNumber"];
            this.accountHolderName = _data["accountHolderName"];
            this.iban = _data["iban"];
        }
    }

    static fromJS(data: any): GarageBankingDetailsItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageBankingDetailsItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankName"] = this.bankName;
        data["kvKNumber"] = this.kvKNumber;
        data["accountHolderName"] = this.accountHolderName;
        data["iban"] = this.iban;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageBankingDetailsItem extends IBaseEntity {
    bankName?: string;
    kvKNumber?: string;
    accountHolderName?: string;
    iban?: string;
}

export class GarageServicesSettingsItem extends BaseEntity implements IGarageServicesSettingsItem {
    maxAutomaticPlannedOrders?: number;
    trySendMailOnNewOrders?: boolean;
    trySendWhatsappMessagOnNewOrders?: boolean;
    isDeliveryEnabled?: boolean;
    isAuthohelperDeliveryEnabled?: boolean;
    deliveryPrice?: number;
    maxAutomaticPlannedDeliveries?: number;

    constructor(data?: IGarageServicesSettingsItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.maxAutomaticPlannedOrders = _data["maxAutomaticPlannedOrders"];
            this.trySendMailOnNewOrders = _data["trySendMailOnNewOrders"];
            this.trySendWhatsappMessagOnNewOrders = _data["trySendWhatsappMessagOnNewOrders"];
            this.isDeliveryEnabled = _data["isDeliveryEnabled"];
            this.isAuthohelperDeliveryEnabled = _data["isAuthohelperDeliveryEnabled"];
            this.deliveryPrice = _data["deliveryPrice"];
            this.maxAutomaticPlannedDeliveries = _data["maxAutomaticPlannedDeliveries"];
        }
    }

    static fromJS(data: any): GarageServicesSettingsItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageServicesSettingsItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxAutomaticPlannedOrders"] = this.maxAutomaticPlannedOrders;
        data["trySendMailOnNewOrders"] = this.trySendMailOnNewOrders;
        data["trySendWhatsappMessagOnNewOrders"] = this.trySendWhatsappMessagOnNewOrders;
        data["isDeliveryEnabled"] = this.isDeliveryEnabled;
        data["isAuthohelperDeliveryEnabled"] = this.isAuthohelperDeliveryEnabled;
        data["deliveryPrice"] = this.deliveryPrice;
        data["maxAutomaticPlannedDeliveries"] = this.maxAutomaticPlannedDeliveries;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageServicesSettingsItem extends IBaseEntity {
    maxAutomaticPlannedOrders?: number;
    trySendMailOnNewOrders?: boolean;
    trySendWhatsappMessagOnNewOrders?: boolean;
    isDeliveryEnabled?: boolean;
    isAuthohelperDeliveryEnabled?: boolean;
    deliveryPrice?: number;
    maxAutomaticPlannedDeliveries?: number;
}

export class BadRequestResponse implements IBadRequestResponse {
    type?: string;
    title?: string;
    status?: number;
    errors?: { [key: string]: string; };

    constructor(data?: IBadRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key];
                }
            }
        }
    }

    static fromJS(data: any): BadRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        return data;
    }
}

export interface IBadRequestResponse {
    type?: string;
    title?: string;
    status?: number;
    errors?: { [key: string]: string; };
}

export class GarageOverview implements IGarageOverview {
    name?: string;
    vehicles?: VehicleItem[];

    constructor(data?: IGarageOverview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["vehicles"])) {
                this.vehicles = [] as any;
                for (let item of _data["vehicles"])
                    this.vehicles!.push(VehicleItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GarageOverview {
        data = typeof data === 'object' ? data : {};
        let result = new GarageOverview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.vehicles)) {
            data["vehicles"] = [];
            for (let item of this.vehicles)
                data["vehicles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGarageOverview {
    name?: string;
    vehicles?: VehicleItem[];
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export class VehicleItem extends BaseAuditableEntity implements IVehicleItem {
    licensePlate!: string;
    motExpiryDate!: Date;
    lastLocation!: VehicleLocationItem;
    lastVehicleOwner?: VehicleOwnerItem | undefined;
    serviceLogs!: VehicleServiceLogItem[];

    constructor(data?: IVehicleItem) {
        super(data);
        if (!data) {
            this.lastLocation = new VehicleLocationItem();
            this.serviceLogs = [];
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.licensePlate = _data["licensePlate"];
            this.motExpiryDate = _data["motExpiryDate"] ? new Date(_data["motExpiryDate"].toString()) : <any>undefined;
            this.lastLocation = _data["lastLocation"] ? VehicleLocationItem.fromJS(_data["lastLocation"]) : new VehicleLocationItem();
            this.lastVehicleOwner = _data["lastVehicleOwner"] ? VehicleOwnerItem.fromJS(_data["lastVehicleOwner"]) : <any>undefined;
            if (Array.isArray(_data["serviceLogs"])) {
                this.serviceLogs = [] as any;
                for (let item of _data["serviceLogs"])
                    this.serviceLogs!.push(VehicleServiceLogItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VehicleItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licensePlate"] = this.licensePlate;
        data["motExpiryDate"] = this.motExpiryDate ? this.motExpiryDate.toISOString() : <any>undefined;
        data["lastLocation"] = this.lastLocation ? this.lastLocation.toJSON() : <any>undefined;
        data["lastVehicleOwner"] = this.lastVehicleOwner ? this.lastVehicleOwner.toJSON() : <any>undefined;
        if (Array.isArray(this.serviceLogs)) {
            data["serviceLogs"] = [];
            for (let item of this.serviceLogs)
                data["serviceLogs"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleItem extends IBaseAuditableEntity {
    licensePlate: string;
    motExpiryDate: Date;
    lastLocation: VehicleLocationItem;
    lastVehicleOwner?: VehicleOwnerItem | undefined;
    serviceLogs: VehicleServiceLogItem[];
}

export class VehicleLocationItem extends BaseEntity implements IVehicleLocationItem {
    address?: string | undefined;
    city?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    longitude!: number;
    latitude!: number;

    constructor(data?: IVehicleLocationItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.address = _data["address"];
            this.city = _data["city"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): VehicleLocationItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleLocationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address;
        data["city"] = this.city;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleLocationItem extends IBaseEntity {
    address?: string | undefined;
    city?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    longitude: number;
    latitude: number;
}

export class VehicleOwnerItem extends BaseAuditableEntity implements IVehicleOwnerItem {
    fullName!: string;
    email!: string;
    phoneNumber?: string | undefined;
    vehicleOwnerLocation?: VehicleOwnerLocationItem | undefined;

    constructor(data?: IVehicleOwnerItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.vehicleOwnerLocation = _data["vehicleOwnerLocation"] ? VehicleOwnerLocationItem.fromJS(_data["vehicleOwnerLocation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleOwnerItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleOwnerItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["vehicleOwnerLocation"] = this.vehicleOwnerLocation ? this.vehicleOwnerLocation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleOwnerItem extends IBaseAuditableEntity {
    fullName: string;
    email: string;
    phoneNumber?: string | undefined;
    vehicleOwnerLocation?: VehicleOwnerLocationItem | undefined;
}

export class VehicleOwnerLocationItem extends BaseEntity implements IVehicleOwnerLocationItem {
    address!: string;
    city!: string;
    postalCode?: string | undefined;
    country?: string | undefined;
    longitude?: number | undefined;
    latitude?: number | undefined;

    constructor(data?: IVehicleOwnerLocationItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.address = _data["address"];
            this.city = _data["city"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): VehicleOwnerLocationItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleOwnerLocationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address;
        data["city"] = this.city;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleOwnerLocationItem extends IBaseEntity {
    address: string;
    city: string;
    postalCode?: string | undefined;
    country?: string | undefined;
    longitude?: number | undefined;
    latitude?: number | undefined;
}

export class VehicleServiceLogItem extends BaseAuditableEntity implements IVehicleServiceLogItem {
    ownerId!: string;
    owner?: VehicleOwnerItem;
    vehicleId!: string;
    vehicle?: VehicleItem;
    date!: Date;
    mileage!: number;
    totalPrice!: number;
    description?: string | undefined;
    serviceItems!: GarageServiceItem[];
    metaData?: string;

    constructor(data?: IVehicleServiceLogItem) {
        super(data);
        if (!data) {
            this.serviceItems = [];
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.ownerId = _data["ownerId"];
            this.owner = _data["owner"] ? VehicleOwnerItem.fromJS(_data["owner"]) : <any>undefined;
            this.vehicleId = _data["vehicleId"];
            this.vehicle = _data["vehicle"] ? VehicleItem.fromJS(_data["vehicle"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.mileage = _data["mileage"];
            this.totalPrice = _data["totalPrice"];
            this.description = _data["description"];
            if (Array.isArray(_data["serviceItems"])) {
                this.serviceItems = [] as any;
                for (let item of _data["serviceItems"])
                    this.serviceItems!.push(GarageServiceItem.fromJS(item));
            }
            this.metaData = _data["metaData"];
        }
    }

    static fromJS(data: any): VehicleServiceLogItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleServiceLogItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerId"] = this.ownerId;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["vehicleId"] = this.vehicleId;
        data["vehicle"] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["mileage"] = this.mileage;
        data["totalPrice"] = this.totalPrice;
        data["description"] = this.description;
        if (Array.isArray(this.serviceItems)) {
            data["serviceItems"] = [];
            for (let item of this.serviceItems)
                data["serviceItems"].push(item.toJSON());
        }
        data["metaData"] = this.metaData;
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleServiceLogItem extends IBaseAuditableEntity {
    ownerId: string;
    owner?: VehicleOwnerItem;
    vehicleId: string;
    vehicle?: VehicleItem;
    date: Date;
    mileage: number;
    totalPrice: number;
    description?: string | undefined;
    serviceItems: GarageServiceItem[];
    metaData?: string;
}

export class GarageServiceItem extends BaseAuditableEntity implements IGarageServiceItem {
    userId?: string;
    garageId?: string;
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;
    status?: number;

    constructor(data?: IGarageServiceItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.garageId = _data["garageId"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.durationInMinutes = _data["durationInMinutes"];
            this.price = _data["price"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GarageServiceItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageServiceItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["garageId"] = this.garageId;
        data["type"] = this.type;
        data["description"] = this.description;
        data["durationInMinutes"] = this.durationInMinutes;
        data["price"] = this.price;
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageServiceItem extends IBaseAuditableEntity {
    userId?: string;
    garageId?: string;
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;
    status?: number;
}

export enum GarageServiceType {
    Other = 0,
    CompanyStockService = 30,
    RegistrationService = 40,
    AcceleratedRegistrationService = 50,
    MOTServiceLightVehicle = 60,
    MOTServiceHeavyVehicle = 61,
    MOTServiceAgriculture = 62,
    ControlDeviceService = 70,
    GasInstallationService = 80,
    MopedConversionService = 90,
    DismantlingService = 100,
    TaxiComputerService = 110,
    LicensePlateManufactureService = 120,
    Inspection = 131,
    SmallMaintenance = 132,
    GreatMaintenance = 133,
    AirConditioningMaintenance = 134,
    SeasonalTireChange = 135,
}

export class GarageServiceItemDto implements IGarageServiceItemDto {
    id?: string;
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;
    status?: number;

    constructor(data?: IGarageServiceItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.durationInMinutes = _data["durationInMinutes"];
            this.price = _data["price"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GarageServiceItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageServiceItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["description"] = this.description;
        data["durationInMinutes"] = this.durationInMinutes;
        data["price"] = this.price;
        data["status"] = this.status;
        return data;
    }
}

export interface IGarageServiceItemDto {
    id?: string;
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;
    status?: number;
}

export class GarageEmployeeItemDto implements IGarageEmployeeItemDto {
    id?: string;
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItem[];
    workExperiences?: GarageEmployeeWorkExperienceItem[];

    constructor(data?: IGarageEmployeeItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isActive = _data["isActive"];
            this.contact = _data["contact"] ? ContactItem.fromJS(_data["contact"]) : <any>undefined;
            if (Array.isArray(_data["workSchema"])) {
                this.workSchema = [] as any;
                for (let item of _data["workSchema"])
                    this.workSchema!.push(GarageEmployeeWorkSchemaItem.fromJS(item));
            }
            if (Array.isArray(_data["workExperiences"])) {
                this.workExperiences = [] as any;
                for (let item of _data["workExperiences"])
                    this.workExperiences!.push(GarageEmployeeWorkExperienceItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GarageEmployeeItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (Array.isArray(this.workSchema)) {
            data["workSchema"] = [];
            for (let item of this.workSchema)
                data["workSchema"].push(item.toJSON());
        }
        if (Array.isArray(this.workExperiences)) {
            data["workExperiences"] = [];
            for (let item of this.workExperiences)
                data["workExperiences"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGarageEmployeeItemDto {
    id?: string;
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItem[];
    workExperiences?: GarageEmployeeWorkExperienceItem[];
}

export class ContactItem extends BaseEntity implements IContactItem {
    fullName!: string;
    phoneNumber?: string;
    email?: string;

    constructor(data?: IContactItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ContactItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContactItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        super.toJSON(data);
        return data;
    }
}

export interface IContactItem extends IBaseEntity {
    fullName: string;
    phoneNumber?: string;
    email?: string;
}

export class GarageEmployeeWorkSchemaItem extends BaseEntity implements IGarageEmployeeWorkSchemaItem {
    employeeId!: string;
    weekOfYear?: number;
    dayOfWeek!: number;
    startTime!: Date;
    endTime!: Date;
    notes?: string;

    constructor(data?: IGarageEmployeeWorkSchemaItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.employeeId = _data["employeeId"];
            this.weekOfYear = _data["weekOfYear"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): GarageEmployeeWorkSchemaItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeWorkSchemaItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["weekOfYear"] = this.weekOfYear;
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageEmployeeWorkSchemaItem extends IBaseEntity {
    employeeId: string;
    weekOfYear?: number;
    dayOfWeek: number;
    startTime: Date;
    endTime: Date;
    notes?: string;
}

export class GarageEmployeeWorkExperienceItem extends BaseEntity implements IGarageEmployeeWorkExperienceItem {
    garageId!: string;
    employeeId!: string;
    serviceId!: string;
    description!: string;

    constructor(data?: IGarageEmployeeWorkExperienceItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.garageId = _data["garageId"];
            this.employeeId = _data["employeeId"];
            this.serviceId = _data["serviceId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GarageEmployeeWorkExperienceItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeWorkExperienceItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["garageId"] = this.garageId;
        data["employeeId"] = this.employeeId;
        data["serviceId"] = this.serviceId;
        data["description"] = this.description;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageEmployeeWorkExperienceItem extends IBaseEntity {
    garageId: string;
    employeeId: string;
    serviceId: string;
    description: string;
}

export class GarageItem extends BaseAuditableEntity implements IGarageItem {
    userId?: string;
    name?: string;
    email?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    location?: GarageLocationItem;
    bankingDetails?: GarageBankingDetailsItem;
    servicesSettings?: GarageServicesSettingsItem;
    employees?: GarageEmployeeItem[];

    constructor(data?: IGarageItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsAppNumber = _data["whatsAppNumber"];
            this.location = _data["location"] ? GarageLocationItem.fromJS(_data["location"]) : <any>undefined;
            this.bankingDetails = _data["bankingDetails"] ? GarageBankingDetailsItem.fromJS(_data["bankingDetails"]) : <any>undefined;
            this.servicesSettings = _data["servicesSettings"] ? GarageServicesSettingsItem.fromJS(_data["servicesSettings"]) : <any>undefined;
            if (Array.isArray(_data["employees"])) {
                this.employees = [] as any;
                for (let item of _data["employees"])
                    this.employees!.push(GarageEmployeeItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GarageItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsAppNumber"] = this.whatsAppNumber;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["bankingDetails"] = this.bankingDetails ? this.bankingDetails.toJSON() : <any>undefined;
        data["servicesSettings"] = this.servicesSettings ? this.servicesSettings.toJSON() : <any>undefined;
        if (Array.isArray(this.employees)) {
            data["employees"] = [];
            for (let item of this.employees)
                data["employees"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGarageItem extends IBaseAuditableEntity {
    userId?: string;
    name?: string;
    email?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    location?: GarageLocationItem;
    bankingDetails?: GarageBankingDetailsItem;
    servicesSettings?: GarageServicesSettingsItem;
    employees?: GarageEmployeeItem[];
}

export class GarageEmployeeItem extends BaseAuditableEntity implements IGarageEmployeeItem {
    userId?: string;
    garageId?: string;
    garage?: GarageItem;
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItem[];
    workExperiences?: GarageEmployeeWorkExperienceItem[];

    constructor(data?: IGarageEmployeeItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.garageId = _data["garageId"];
            this.garage = _data["garage"] ? GarageItem.fromJS(_data["garage"]) : <any>undefined;
            this.isActive = _data["isActive"];
            this.contact = _data["contact"] ? ContactItem.fromJS(_data["contact"]) : <any>undefined;
            if (Array.isArray(_data["workSchema"])) {
                this.workSchema = [] as any;
                for (let item of _data["workSchema"])
                    this.workSchema!.push(GarageEmployeeWorkSchemaItem.fromJS(item));
            }
            if (Array.isArray(_data["workExperiences"])) {
                this.workExperiences = [] as any;
                for (let item of _data["workExperiences"])
                    this.workExperiences!.push(GarageEmployeeWorkExperienceItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GarageEmployeeItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["garageId"] = this.garageId;
        data["garage"] = this.garage ? this.garage.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (Array.isArray(this.workSchema)) {
            data["workSchema"] = [];
            for (let item of this.workSchema)
                data["workSchema"].push(item.toJSON());
        }
        if (Array.isArray(this.workExperiences)) {
            data["workExperiences"] = [];
            for (let item of this.workExperiences)
                data["workExperiences"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGarageEmployeeItem extends IBaseAuditableEntity {
    userId?: string;
    garageId?: string;
    garage?: GarageItem;
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItem[];
    workExperiences?: GarageEmployeeWorkExperienceItem[];
}

export class CreateGarageCommand implements ICreateGarageCommand {
    name?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    email?: string;
    location?: BriefLocationDto;
    bankingDetails?: BriefBankingDetailsDto;

    constructor(data?: ICreateGarageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsAppNumber = _data["whatsAppNumber"];
            this.email = _data["email"];
            this.location = _data["location"] ? BriefLocationDto.fromJS(_data["location"]) : <any>undefined;
            this.bankingDetails = _data["bankingDetails"] ? BriefBankingDetailsDto.fromJS(_data["bankingDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateGarageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGarageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsAppNumber"] = this.whatsAppNumber;
        data["email"] = this.email;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["bankingDetails"] = this.bankingDetails ? this.bankingDetails.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateGarageCommand {
    name?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    email?: string;
    location?: BriefLocationDto;
    bankingDetails?: BriefBankingDetailsDto;
}

export class BriefLocationDto implements IBriefLocationDto {
    address?: string;
    postalCode?: string;
    city?: string;
    country?: string;
    longitude?: number;
    latitude?: number;

    constructor(data?: IBriefLocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.address = _data["address"];
            this.postalCode = _data["postalCode"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): BriefLocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new BriefLocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address;
        data["postalCode"] = this.postalCode;
        data["city"] = this.city;
        data["country"] = this.country;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        return data;
    }
}

export interface IBriefLocationDto {
    address?: string;
    postalCode?: string;
    city?: string;
    country?: string;
    longitude?: number;
    latitude?: number;
}

export class BriefBankingDetailsDto implements IBriefBankingDetailsDto {
    bankName?: string;
    kvKNumber?: string;
    accountHolderName?: string;
    iban?: string;

    constructor(data?: IBriefBankingDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bankName = _data["bankName"];
            this.kvKNumber = _data["kvKNumber"];
            this.accountHolderName = _data["accountHolderName"];
            this.iban = _data["iban"];
        }
    }

    static fromJS(data: any): BriefBankingDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new BriefBankingDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankName"] = this.bankName;
        data["kvKNumber"] = this.kvKNumber;
        data["accountHolderName"] = this.accountHolderName;
        data["iban"] = this.iban;
        return data;
    }
}

export interface IBriefBankingDetailsDto {
    bankName?: string;
    kvKNumber?: string;
    accountHolderName?: string;
    iban?: string;
}

export class CreateGarageServiceCommand implements ICreateGarageServiceCommand {
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;

    constructor(data?: ICreateGarageServiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.description = _data["description"];
            this.durationInMinutes = _data["durationInMinutes"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): CreateGarageServiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGarageServiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["description"] = this.description;
        data["durationInMinutes"] = this.durationInMinutes;
        data["price"] = this.price;
        return data;
    }
}

export interface ICreateGarageServiceCommand {
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;
}

export class CreateGarageEmployeeCommand implements ICreateGarageEmployeeCommand {
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItemDto[];
    workExperiences?: GarageEmployeeWorkExperienceItemDto[];

    constructor(data?: ICreateGarageEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isActive = _data["isActive"];
            this.contact = _data["contact"] ? ContactItem.fromJS(_data["contact"]) : <any>undefined;
            if (Array.isArray(_data["workSchema"])) {
                this.workSchema = [] as any;
                for (let item of _data["workSchema"])
                    this.workSchema!.push(GarageEmployeeWorkSchemaItemDto.fromJS(item));
            }
            if (Array.isArray(_data["workExperiences"])) {
                this.workExperiences = [] as any;
                for (let item of _data["workExperiences"])
                    this.workExperiences!.push(GarageEmployeeWorkExperienceItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateGarageEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGarageEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isActive"] = this.isActive;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (Array.isArray(this.workSchema)) {
            data["workSchema"] = [];
            for (let item of this.workSchema)
                data["workSchema"].push(item.toJSON());
        }
        if (Array.isArray(this.workExperiences)) {
            data["workExperiences"] = [];
            for (let item of this.workExperiences)
                data["workExperiences"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateGarageEmployeeCommand {
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItemDto[];
    workExperiences?: GarageEmployeeWorkExperienceItemDto[];
}

export class GarageEmployeeWorkSchemaItemDto implements IGarageEmployeeWorkSchemaItemDto {
    weekOfYear?: number;
    dayOfWeek!: number;
    startTime!: Date;
    endTime!: Date;
    notes?: string;

    constructor(data?: IGarageEmployeeWorkSchemaItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weekOfYear = _data["weekOfYear"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): GarageEmployeeWorkSchemaItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeWorkSchemaItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weekOfYear"] = this.weekOfYear;
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IGarageEmployeeWorkSchemaItemDto {
    weekOfYear?: number;
    dayOfWeek: number;
    startTime: Date;
    endTime: Date;
    notes?: string;
}

export class GarageEmployeeWorkExperienceItemDto implements IGarageEmployeeWorkExperienceItemDto {
    serviceId!: string;
    description!: string;

    constructor(data?: IGarageEmployeeWorkExperienceItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serviceId = _data["serviceId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GarageEmployeeWorkExperienceItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeWorkExperienceItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceId"] = this.serviceId;
        data["description"] = this.description;
        return data;
    }
}

export interface IGarageEmployeeWorkExperienceItemDto {
    serviceId: string;
    description: string;
}

export class UpdateGarageSettingsCommand implements IUpdateGarageSettingsCommand {
    name?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    email?: string;
    location?: GarageLocationItem;
    bankingDetails?: GarageBankingDetailsItem;
    servicesSettings?: GarageServicesSettingsItem;

    constructor(data?: IUpdateGarageSettingsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsAppNumber = _data["whatsAppNumber"];
            this.email = _data["email"];
            this.location = _data["location"] ? GarageLocationItem.fromJS(_data["location"]) : <any>undefined;
            this.bankingDetails = _data["bankingDetails"] ? GarageBankingDetailsItem.fromJS(_data["bankingDetails"]) : <any>undefined;
            this.servicesSettings = _data["servicesSettings"] ? GarageServicesSettingsItem.fromJS(_data["servicesSettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateGarageSettingsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGarageSettingsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsAppNumber"] = this.whatsAppNumber;
        data["email"] = this.email;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["bankingDetails"] = this.bankingDetails ? this.bankingDetails.toJSON() : <any>undefined;
        data["servicesSettings"] = this.servicesSettings ? this.servicesSettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateGarageSettingsCommand {
    name?: string;
    phoneNumber?: string;
    whatsAppNumber?: string;
    email?: string;
    location?: GarageLocationItem;
    bankingDetails?: GarageBankingDetailsItem;
    servicesSettings?: GarageServicesSettingsItem;
}

export class UpdateGarageServiceCommand implements IUpdateGarageServiceCommand {
    id?: string;
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;

    constructor(data?: IUpdateGarageServiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.durationInMinutes = _data["durationInMinutes"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): UpdateGarageServiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGarageServiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["description"] = this.description;
        data["durationInMinutes"] = this.durationInMinutes;
        data["price"] = this.price;
        return data;
    }
}

export interface IUpdateGarageServiceCommand {
    id?: string;
    type?: GarageServiceType;
    description?: string;
    durationInMinutes?: number;
    price?: number;
}

export class UpdateGarageEmployeeCommand implements IUpdateGarageEmployeeCommand {
    id?: string;
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItemDto[];
    workExperiences?: GarageEmployeeWorkExperienceItemDto[];

    constructor(data?: IUpdateGarageEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isActive = _data["isActive"];
            this.contact = _data["contact"] ? ContactItem.fromJS(_data["contact"]) : <any>undefined;
            if (Array.isArray(_data["workSchema"])) {
                this.workSchema = [] as any;
                for (let item of _data["workSchema"])
                    this.workSchema!.push(GarageEmployeeWorkSchemaItemDto.fromJS(item));
            }
            if (Array.isArray(_data["workExperiences"])) {
                this.workExperiences = [] as any;
                for (let item of _data["workExperiences"])
                    this.workExperiences!.push(GarageEmployeeWorkExperienceItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateGarageEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGarageEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (Array.isArray(this.workSchema)) {
            data["workSchema"] = [];
            for (let item of this.workSchema)
                data["workSchema"].push(item.toJSON());
        }
        if (Array.isArray(this.workExperiences)) {
            data["workExperiences"] = [];
            for (let item of this.workExperiences)
                data["workExperiences"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateGarageEmployeeCommand {
    id?: string;
    isActive?: boolean;
    contact?: ContactItem;
    workSchema?: GarageEmployeeWorkSchemaItemDto[];
    workExperiences?: GarageEmployeeWorkExperienceItemDto[];
}

export class PaginatedListOfGarageLookupBriefDto implements IPaginatedListOfGarageLookupBriefDto {
    items?: GarageLookupBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfGarageLookupBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GarageLookupBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfGarageLookupBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfGarageLookupBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfGarageLookupBriefDto {
    items?: GarageLookupBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class GarageLookupBriefDto implements IGarageLookupBriefDto {
    garageId?: string | undefined;
    identifier?: string;
    name?: string;
    address?: string;
    city?: string;
    website?: string | undefined;
    daysOfWeek?: number[];
    knownServices?: GarageServiceType[];
    rating?: number | undefined;
    userRatingsTotal?: number | undefined;
    distanceInMeter?: number;
    hasPickupService?: boolean;
    hasReplacementTransportService?: boolean;

    constructor(data?: IGarageLookupBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.garageId = _data["garageId"];
            this.identifier = _data["identifier"];
            this.name = _data["name"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.website = _data["website"];
            if (Array.isArray(_data["daysOfWeek"])) {
                this.daysOfWeek = [] as any;
                for (let item of _data["daysOfWeek"])
                    this.daysOfWeek!.push(item);
            }
            if (Array.isArray(_data["knownServices"])) {
                this.knownServices = [] as any;
                for (let item of _data["knownServices"])
                    this.knownServices!.push(item);
            }
            this.rating = _data["rating"];
            this.userRatingsTotal = _data["userRatingsTotal"];
            this.distanceInMeter = _data["distanceInMeter"];
            this.hasPickupService = _data["hasPickupService"];
            this.hasReplacementTransportService = _data["hasReplacementTransportService"];
        }
    }

    static fromJS(data: any): GarageLookupBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageLookupBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["garageId"] = this.garageId;
        data["identifier"] = this.identifier;
        data["name"] = this.name;
        data["address"] = this.address;
        data["city"] = this.city;
        data["website"] = this.website;
        if (Array.isArray(this.daysOfWeek)) {
            data["daysOfWeek"] = [];
            for (let item of this.daysOfWeek)
                data["daysOfWeek"].push(item);
        }
        if (Array.isArray(this.knownServices)) {
            data["knownServices"] = [];
            for (let item of this.knownServices)
                data["knownServices"].push(item);
        }
        data["rating"] = this.rating;
        data["userRatingsTotal"] = this.userRatingsTotal;
        data["distanceInMeter"] = this.distanceInMeter;
        data["hasPickupService"] = this.hasPickupService;
        data["hasReplacementTransportService"] = this.hasReplacementTransportService;
        return data;
    }
}

export interface IGarageLookupBriefDto {
    garageId?: string | undefined;
    identifier?: string;
    name?: string;
    address?: string;
    city?: string;
    website?: string | undefined;
    daysOfWeek?: number[];
    knownServices?: GarageServiceType[];
    rating?: number | undefined;
    userRatingsTotal?: number | undefined;
    distanceInMeter?: number;
    hasPickupService?: boolean;
    hasReplacementTransportService?: boolean;
}

export class GarageLookupDto implements IGarageLookupDto {
    garageId?: string | undefined;
    identifier?: string;
    name?: string;
    largeData?: GarageLookupLargeItem | undefined;
    knownServices?: GarageServiceType[];
    daysOfWeek?: number[];
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    emailAddress?: string | undefined;
    website?: string | undefined;
    rating?: number | undefined;
    userRatingsTotal?: number | undefined;
    address?: string;
    city?: string;
    hasPickupService?: boolean;
    hasReplacementTransportService?: boolean;

    constructor(data?: IGarageLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.garageId = _data["garageId"];
            this.identifier = _data["identifier"];
            this.name = _data["name"];
            this.largeData = _data["largeData"] ? GarageLookupLargeItem.fromJS(_data["largeData"]) : <any>undefined;
            if (Array.isArray(_data["knownServices"])) {
                this.knownServices = [] as any;
                for (let item of _data["knownServices"])
                    this.knownServices!.push(item);
            }
            if (Array.isArray(_data["daysOfWeek"])) {
                this.daysOfWeek = [] as any;
                for (let item of _data["daysOfWeek"])
                    this.daysOfWeek!.push(item);
            }
            this.phoneNumber = _data["phoneNumber"];
            this.whatsappNumber = _data["whatsappNumber"];
            this.emailAddress = _data["emailAddress"];
            this.website = _data["website"];
            this.rating = _data["rating"];
            this.userRatingsTotal = _data["userRatingsTotal"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.hasPickupService = _data["hasPickupService"];
            this.hasReplacementTransportService = _data["hasReplacementTransportService"];
        }
    }

    static fromJS(data: any): GarageLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["garageId"] = this.garageId;
        data["identifier"] = this.identifier;
        data["name"] = this.name;
        data["largeData"] = this.largeData ? this.largeData.toJSON() : <any>undefined;
        if (Array.isArray(this.knownServices)) {
            data["knownServices"] = [];
            for (let item of this.knownServices)
                data["knownServices"].push(item);
        }
        if (Array.isArray(this.daysOfWeek)) {
            data["daysOfWeek"] = [];
            for (let item of this.daysOfWeek)
                data["daysOfWeek"].push(item);
        }
        data["phoneNumber"] = this.phoneNumber;
        data["whatsappNumber"] = this.whatsappNumber;
        data["emailAddress"] = this.emailAddress;
        data["website"] = this.website;
        data["rating"] = this.rating;
        data["userRatingsTotal"] = this.userRatingsTotal;
        data["address"] = this.address;
        data["city"] = this.city;
        data["hasPickupService"] = this.hasPickupService;
        data["hasReplacementTransportService"] = this.hasReplacementTransportService;
        return data;
    }
}

export interface IGarageLookupDto {
    garageId?: string | undefined;
    identifier?: string;
    name?: string;
    largeData?: GarageLookupLargeItem | undefined;
    knownServices?: GarageServiceType[];
    daysOfWeek?: number[];
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    emailAddress?: string | undefined;
    website?: string | undefined;
    rating?: number | undefined;
    userRatingsTotal?: number | undefined;
    address?: string;
    city?: string;
    hasPickupService?: boolean;
    hasReplacementTransportService?: boolean;
}

export class GarageLookupLargeItem extends BaseEntity implements IGarageLookupLargeItem {
    googleApiDetailsJson?: string;
    firstPlacePhoto?: string | undefined;

    constructor(data?: IGarageLookupLargeItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.googleApiDetailsJson = _data["googleApiDetailsJson"];
            this.firstPlacePhoto = _data["firstPlacePhoto"];
        }
    }

    static fromJS(data: any): GarageLookupLargeItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageLookupLargeItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["googleApiDetailsJson"] = this.googleApiDetailsJson;
        data["firstPlacePhoto"] = this.firstPlacePhoto;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageLookupLargeItem extends IBaseEntity {
    googleApiDetailsJson?: string;
    firstPlacePhoto?: string | undefined;
}

export class GarageLookupsStatusDto implements IGarageLookupsStatusDto {
    ableToInsert?: number;
    ableToUpdate?: number;
    upToDate?: number;
    total?: number;

    constructor(data?: IGarageLookupsStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ableToInsert = _data["ableToInsert"];
            this.ableToUpdate = _data["ableToUpdate"];
            this.upToDate = _data["upToDate"];
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): GarageLookupsStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new GarageLookupsStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ableToInsert"] = this.ableToInsert;
        data["ableToUpdate"] = this.ableToUpdate;
        data["upToDate"] = this.upToDate;
        data["total"] = this.total;
        return data;
    }
}

export interface IGarageLookupsStatusDto {
    ableToInsert?: number;
    ableToUpdate?: number;
    upToDate?: number;
    total?: number;
}

export class VehicleBriefInfoItemDto implements IVehicleBriefInfoItemDto {
    licensePlate?: string;
    brand?: string;
    consumption?: string;
    motExpiryDate?: string;
    mileage?: string;

    constructor(data?: IVehicleBriefInfoItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.licensePlate = _data["licensePlate"];
            this.brand = _data["brand"];
            this.consumption = _data["consumption"];
            this.motExpiryDate = _data["motExpiryDate"];
            this.mileage = _data["mileage"];
        }
    }

    static fromJS(data: any): VehicleBriefInfoItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleBriefInfoItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licensePlate"] = this.licensePlate;
        data["brand"] = this.brand;
        data["consumption"] = this.consumption;
        data["motExpiryDate"] = this.motExpiryDate;
        data["mileage"] = this.mileage;
        return data;
    }
}

export interface IVehicleBriefInfoItemDto {
    licensePlate?: string;
    brand?: string;
    consumption?: string;
    motExpiryDate?: string;
    mileage?: string;
}

export class VehicleInfoItemDto implements IVehicleInfoItemDto {
    data?: VehicleInfoSectionItem[];

    constructor(data?: IVehicleInfoItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(VehicleInfoSectionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VehicleInfoItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInfoItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVehicleInfoItemDto {
    data?: VehicleInfoSectionItem[];
}

export class VehicleInfoSectionItem implements IVehicleInfoSectionItem {
    title?: string;
    values?: string[][];

    constructor(data?: IVehicleInfoSectionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): VehicleInfoSectionItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInfoSectionItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IVehicleInfoSectionItem {
    title?: string;
    values?: string[][];
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}