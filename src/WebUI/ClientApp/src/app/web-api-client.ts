//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IGarageClient {

    overview(id: string): Promise<GarageOverview>;

    settings(id: string): Promise<GarageSettings>;
}

export class GarageClient implements IGarageClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    overview(id: string): Promise<GarageOverview> {
        let url_ = this.baseUrl + "/api/Garage/{id}/Overview";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOverview(_response);
        });
    }

    protected processOverview(response: Response): Promise<GarageOverview> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageOverview.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageOverview>(null as any);
    }

    settings(id: string): Promise<GarageSettings> {
        let url_ = this.baseUrl + "/api/Garage/{id}/Settings";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSettings(_response);
        });
    }

    protected processSettings(response: Response): Promise<GarageSettings> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GarageSettings.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GarageSettings>(null as any);
    }
}

export interface IVehicleClient {

    searchVehicle(licensePlate: string | null | undefined): Promise<LicencePlateBriefResponse>;

    getVehicleInformation(licensePlate: string | null | undefined): Promise<VehicleInformationResponse>;
}

export class VehicleClient implements IVehicleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    searchVehicle(licensePlate: string | null | undefined): Promise<LicencePlateBriefResponse> {
        let url_ = this.baseUrl + "/api/Vehicle/search?";
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchVehicle(_response);
        });
    }

    protected processSearchVehicle(response: Response): Promise<LicencePlateBriefResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LicencePlateBriefResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LicencePlateBriefResponse>(null as any);
    }

    getVehicleInformation(licensePlate: string | null | undefined): Promise<VehicleInformationResponse> {
        let url_ = this.baseUrl + "/api/Vehicle/information?";
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehicleInformation(_response);
        });
    }

    protected processGetVehicleInformation(response: Response): Promise<VehicleInformationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VehicleInformationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VehicleInformationResponse>(null as any);
    }
}

export interface IWeatherForecastClient {

    get(): Promise<WeatherForecast[]>;
}

export class WeatherForecastClient implements IWeatherForecastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class GarageOverview implements IGarageOverview {
    name?: string;
    vehicles?: VehicleItem[];
    employees?: GarageEmployeeItem[];

    constructor(data?: IGarageOverview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["vehicles"])) {
                this.vehicles = [] as any;
                for (let item of _data["vehicles"])
                    this.vehicles!.push(VehicleItem.fromJS(item));
            }
            if (Array.isArray(_data["employees"])) {
                this.employees = [] as any;
                for (let item of _data["employees"])
                    this.employees!.push(GarageEmployeeItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GarageOverview {
        data = typeof data === 'object' ? data : {};
        let result = new GarageOverview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.vehicles)) {
            data["vehicles"] = [];
            for (let item of this.vehicles)
                data["vehicles"].push(item.toJSON());
        }
        if (Array.isArray(this.employees)) {
            data["employees"] = [];
            for (let item of this.employees)
                data["employees"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGarageOverview {
    name?: string;
    vehicles?: VehicleItem[];
    employees?: GarageEmployeeItem[];
}

export abstract class BaseEntity implements IBaseEntity {
    id?: string;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: string;
    domainEvents?: BaseEvent[];
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export class VehicleItem extends BaseAuditableEntity implements IVehicleItem {
    licensePlate?: string;
    model?: string;
    brand?: string;
    registrationDate?: Date;
    vehicleOwner?: VehicleOwnerItem;

    constructor(data?: IVehicleItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.licensePlate = _data["licensePlate"];
            this.model = _data["model"];
            this.brand = _data["brand"];
            this.registrationDate = _data["registrationDate"] ? new Date(_data["registrationDate"].toString()) : <any>undefined;
            this.vehicleOwner = _data["vehicleOwner"] ? VehicleOwnerItem.fromJS(_data["vehicleOwner"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licensePlate"] = this.licensePlate;
        data["model"] = this.model;
        data["brand"] = this.brand;
        data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : <any>undefined;
        data["vehicleOwner"] = this.vehicleOwner ? this.vehicleOwner.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleItem extends IBaseAuditableEntity {
    licensePlate?: string;
    model?: string;
    brand?: string;
    registrationDate?: Date;
    vehicleOwner?: VehicleOwnerItem;
}

export class VehicleOwnerItem extends BaseAuditableEntity implements IVehicleOwnerItem {
    fullName!: string;
    phoneNumber?: string;
    email?: string;

    constructor(data?: IVehicleOwnerItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): VehicleOwnerItem {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleOwnerItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        super.toJSON(data);
        return data;
    }
}

export interface IVehicleOwnerItem extends IBaseAuditableEntity {
    fullName: string;
    phoneNumber?: string;
    email?: string;
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export class GarageEmployeeItem extends BaseAuditableEntity implements IGarageEmployeeItem {
    fullName!: string;
    position?: string;
    dateOfHire?: Date;
    email!: string;
    phoneNumber?: string;

    constructor(data?: IGarageEmployeeItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fullName = _data["fullName"];
            this.position = _data["position"];
            this.dateOfHire = _data["dateOfHire"] ? new Date(_data["dateOfHire"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): GarageEmployeeItem {
        data = typeof data === 'object' ? data : {};
        let result = new GarageEmployeeItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["position"] = this.position;
        data["dateOfHire"] = this.dateOfHire ? this.dateOfHire.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        super.toJSON(data);
        return data;
    }
}

export interface IGarageEmployeeItem extends IBaseAuditableEntity {
    fullName: string;
    position?: string;
    dateOfHire?: Date;
    email: string;
    phoneNumber?: string;
}

export class GarageSettings implements IGarageSettings {
    name!: string;
    location?: LocationItem;
    businessOwner?: BusinessOwnerItem;
    bankingDetails?: BankingInfoItem;
    contacts?: ContactItem[];

    constructor(data?: IGarageSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.location = _data["location"] ? LocationItem.fromJS(_data["location"]) : <any>undefined;
            this.businessOwner = _data["businessOwner"] ? BusinessOwnerItem.fromJS(_data["businessOwner"]) : <any>undefined;
            this.bankingDetails = _data["bankingDetails"] ? BankingInfoItem.fromJS(_data["bankingDetails"]) : <any>undefined;
            if (Array.isArray(_data["contacts"])) {
                this.contacts = [] as any;
                for (let item of _data["contacts"])
                    this.contacts!.push(ContactItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GarageSettings {
        data = typeof data === 'object' ? data : {};
        let result = new GarageSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["businessOwner"] = this.businessOwner ? this.businessOwner.toJSON() : <any>undefined;
        data["bankingDetails"] = this.bankingDetails ? this.bankingDetails.toJSON() : <any>undefined;
        if (Array.isArray(this.contacts)) {
            data["contacts"] = [];
            for (let item of this.contacts)
                data["contacts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGarageSettings {
    name: string;
    location?: LocationItem;
    businessOwner?: BusinessOwnerItem;
    bankingDetails?: BankingInfoItem;
    contacts?: ContactItem[];
}

export class LocationItem extends BaseAuditableEntity implements ILocationItem {
    longitude!: number;
    latitude!: number;
    address?: string;
    city?: string;
    postalCode?: string;
    country?: string;

    constructor(data?: ILocationItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): LocationItem {
        data = typeof data === 'object' ? data : {};
        let result = new LocationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["address"] = this.address;
        data["city"] = this.city;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        super.toJSON(data);
        return data;
    }
}

export interface ILocationItem extends IBaseAuditableEntity {
    longitude: number;
    latitude: number;
    address?: string;
    city?: string;
    postalCode?: string;
    country?: string;
}

export class BusinessOwnerItem extends BaseAuditableEntity implements IBusinessOwnerItem {
    fullName!: string;
    phoneNumber?: string;
    email?: string;

    constructor(data?: IBusinessOwnerItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): BusinessOwnerItem {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessOwnerItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        super.toJSON(data);
        return data;
    }
}

export interface IBusinessOwnerItem extends IBaseAuditableEntity {
    fullName: string;
    phoneNumber?: string;
    email?: string;
}

export class BankingInfoItem extends BaseAuditableEntity implements IBankingInfoItem {
    bankName!: string;
    accountNumber!: string;
    iban?: string;
    swiftCode?: string;

    constructor(data?: IBankingInfoItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.bankName = _data["bankName"];
            this.accountNumber = _data["accountNumber"];
            this.iban = _data["iban"];
            this.swiftCode = _data["swiftCode"];
        }
    }

    static fromJS(data: any): BankingInfoItem {
        data = typeof data === 'object' ? data : {};
        let result = new BankingInfoItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankName"] = this.bankName;
        data["accountNumber"] = this.accountNumber;
        data["iban"] = this.iban;
        data["swiftCode"] = this.swiftCode;
        super.toJSON(data);
        return data;
    }
}

export interface IBankingInfoItem extends IBaseAuditableEntity {
    bankName: string;
    accountNumber: string;
    iban?: string;
    swiftCode?: string;
}

export class ContactItem extends BaseAuditableEntity implements IContactItem {
    fullName!: string;
    phoneNumber?: string;
    email?: string;
    responsibility?: string;

    constructor(data?: IContactItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.responsibility = _data["responsibility"];
        }
    }

    static fromJS(data: any): ContactItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContactItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["responsibility"] = this.responsibility;
        super.toJSON(data);
        return data;
    }
}

export interface IContactItem extends IBaseAuditableEntity {
    fullName: string;
    phoneNumber?: string;
    email?: string;
    responsibility?: string;
}

export class LicencePlateBriefResponse implements ILicencePlateBriefResponse {
    licencePlate?: string;

    constructor(data?: ILicencePlateBriefResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.licencePlate = _data["licencePlate"];
        }
    }

    static fromJS(data: any): LicencePlateBriefResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LicencePlateBriefResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licencePlate"] = this.licencePlate;
        return data;
    }
}

export interface ILicencePlateBriefResponse {
    licencePlate?: string;
}

export class VehicleInformationResponse implements IVehicleInformationResponse {
    cardInfo?: string[][];
    data?: VehicleInformationSection[];

    constructor(data?: IVehicleInformationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cardInfo"])) {
                this.cardInfo = [] as any;
                for (let item of _data["cardInfo"])
                    this.cardInfo!.push(item);
            }
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(VehicleInformationSection.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VehicleInformationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInformationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cardInfo)) {
            data["cardInfo"] = [];
            for (let item of this.cardInfo)
                data["cardInfo"].push(item);
        }
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVehicleInformationResponse {
    cardInfo?: string[][];
    data?: VehicleInformationSection[];
}

export class VehicleInformationSection implements IVehicleInformationSection {
    title?: string;
    values?: string[][];

    constructor(data?: IVehicleInformationSection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): VehicleInformationSection {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInformationSection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IVehicleInformationSection {
    title?: string;
    values?: string[][];
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}