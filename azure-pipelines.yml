trigger:
  - main

pool:
  vmImage: 'windows-latest'

variables:
  projectName: 'AutoHelper.WebUI'
  buildConfiguration: 'Release'
  major: 1
  minor: 1
  patch: $[counter(variables['minor'], 0)] # Resets when 'minor' is bumped
  NugetVersion: $(major).$(minor).$(patch)

steps:
- task: UseDotNet@2
  inputs:
    version: '7.x'
  displayName: 'Use .NET Core SDK 7.x'

- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '**/*.sln' # Adjust to point to your solution file
  displayName: 'Restore NuGet Packages'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'dotnet nuget locals all --clear'
  displayName: 'Clear NuGet Cache'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
  displayName: 'Restore .NET Core Projects'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build .NET Core Projects'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/YourWebProject.csproj' # Specify your web project
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) -r win-x86 --self-contained --output $(Build.ArtifactStagingDirectory)'
  displayName: 'Publish Web Project'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
  displayName: 'Upload Artifacts to Drop'

- task: AzureWebApp@1
  inputs:
    azureSubscription: '<Your Azure Subscription ID>'
    appType: 'webAppLinux' # Ensure this aligns with your Azure Web App configuration
    appName: 'autohelper-webui'
    resourceGroupName: 'AutoHelper'
    slotName: 'production'
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip' # Ensure this points to the correct zip file
    runtimeStack: 'DOTNETCORE|7.0'
  displayName: 'Deploy to Azure Web App'

  
# steps:

#   - task: VSBuild@1
#     displayName: 'Build Solution'
#     inputs:
#       solution: '$(solution)'
#       msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:OutDir="$(build.artifactStagingDirectory)\\"'
#       platform: '$(buildPlatform)'
#       configuration: '$(buildConfiguration)'

#   - task: VSTest@2
#     displayName: 'Run Unit Tests'
#     inputs:
#       platform: '$(buildPlatform)'
#       configuration: '$(buildConfiguration)'

#   - task: PublishBuildArtifacts@1
#     name: 'PublishBuildArtifacts'
#     displayName: 'Publish Artifacts to Pipeline'
#     inputs:
#       PathtoPublish: '$(System.DefaultWorkingDirectory)'
#       ArtifactName: 'Latest Deploy'
#       publishLocation: 'Container'

  # - task: AzureWebApp@1
  #   displayName: 'Deploy Web UI to Azure Web App'
  #   inputs:
  #     azureSubscription: 'Niek Tuijtel(c01f95dd-b3fa-4a0e-a85c-5b68a7d4270e)'
  #     appType: 'webAppLinux'
  #     appName: 'autohelper-webui'
  #     deployToSlotOrASE: true
  #     resourceGroupName: 'AutoHelper'
  #     slotName: 'production'
  #     package: '$(Build.ArtifactStagingDirectory)'
  #     runtimeStack: 'DOTNETCORE|7.0'
  #     startUpCommand: 'dotnet AutoHelper.WebUI.dll'
  
  # - task: AzureWebApp@1
  #   displayName: 'Deploy Hangfire Dashboard to Azure Web App'
  #   inputs:
  #     azureSubscription: 'Niek Tuijtel(c01f95dd-b3fa-4a0e-a85c-5b68a7d4270e)'
  #     appType: 'webAppLinux'
  #     appName: 'autohelper-hangfire'
  #     deployToSlotOrASE: true
  #     resourceGroupName: 'AutoHelper'
  #     slotName: 'production'
  #     package: '$(Build.ArtifactStagingDirectory)'
  #     runtimeStack: 'DOTNETCORE|7.0'
  #     startUpCommand: 'dotnet AutoHelper.Hangfire.Dashboard.dll'
